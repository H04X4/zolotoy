
import asyncio
import logging
from typing import Optional

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from config import TELEGRAM_TOKEN
from database import Database, ProductModel


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
)
logger = logging.getLogger(__name__)


class BotStates(StatesGroup):
    waiting_for_article = State()


class BotHandler:
    def __init__(self, bot: Bot, db: Database):
        self.bot = bot
        self.db = db

    async def cmd_start(self, message: Message, state: FSMContext) -> None:
        await message.answer(
            "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤!</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ <b>–∞—Ä—Ç–∏–∫—É–ª</b> —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
            parse_mode=ParseMode.HTML,
        )
        await state.set_state(BotStates.waiting_for_article)

    async def handle_article(self, message: Message, state: FSMContext) -> None:
       
        if not self.db.pool:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        article = message.text.strip()
        product: Optional[ProductModel] = await self.db.get_product_by_article(article)

        if not product:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        
        row_sum = product.cost_price * product.order_quantity

        
        caption = (
            f"<b>üì¶ –ê—Ä—Ç–∏–∫—É–ª:</b> {product.article}\n"
            f"<b>üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {'–ï—Å—Ç—å' if product.image else '–ù–µ—Ç'}\n"
            f"<b>üìä –û—Å—Ç–∞—Ç–æ–∫:</b> {product.stock} —à—Ç.\n"
            f"<b>üè™ –ù–∞–ª–∏—á–∏–µ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö:</b> {product.store_presence}\n"
            f"<b>üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {product.cost_price:.2f} —Ä—É–±.\n"
            f"<b>üõí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫–∞–∑–∞:</b> {product.order_quantity} —à—Ç.\n"
            f"<b>üßÆ –°—É–º–º–∞ —Å—Ç—Ä–æ–∫–∏:</b> {row_sum:.2f} —Ä—É–±.\n"
            f"<b>üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {product.comment}"
        )

        try:
            if product.image:
                await message.answer_photo(
                    photo=product.image,
                    caption=caption,
                    parse_mode=ParseMode.HTML,
                )
            else:
                await message.answer(caption, parse_mode=ParseMode.HTML)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await message.answer(caption, parse_mode=ParseMode.HTML)


async def main() -> None:
  
    bot = Bot(
        token=TELEGRAM_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher()

    
    db = Database()
    await db.initialize()

    
    handler = BotHandler(bot, db)

    
    dp.message.register(handler.cmd_start, CommandStart())
    dp.message.register(handler.handle_article, BotStates.waiting_for_article)

    
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
